#
# Öppet API för SHL
# Version: 1.0
# Contact: support@shl.se
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

Get the information about a specific game

.DESCRIPTION

No description available.

.PARAMETER Season
Season to be used, i.e. '2015' for the SHL season 2015/2016

.PARAMETER GameId
Id of the game to get information of

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

GameReport
#>
function Get-Game {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Season},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${GameId},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-Game' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/seasons/{season}/games/{gameId}.json'
        if (!$Season) {
            throw "Error! The required parameter `Season` missing when calling getGame."
        }
        $LocalVarUri = $LocalVarUri.replace('{season}', [System.Web.HTTPUtility]::UrlEncode($Season))
        if (!$GameId) {
            throw "Error! The required parameter `GameId` missing when calling getGame."
        }
        $LocalVarUri = $LocalVarUri.replace('{gameId}', [System.Web.HTTPUtility]::UrlEncode($GameId))

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
            -Uri $LocalVarUri `
            -Accepts $LocalVarAccepts `
            -ContentTypes $LocalVarContentTypes `
            -Body $LocalVarBodyParameter `
            -HeaderParameters $LocalVarHeaderParameters `
            -QueryParameters $LocalVarQueryParameters `
            -FormParameters $LocalVarFormParameters `
            -CookieParameters $LocalVarCookieParameters `
            -ReturnType 'GameReport' `
            -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult['Response']
        }
    }
}

<#
.SYNOPSIS

Get the games for selected season

.DESCRIPTION

No description available.

.PARAMETER Season
Season to be used, i.e. '2015' for the SHL season 2015/2016

.PARAMETER TeamIds
For which team(s) should the list be based on

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Game[]
#>
function Get-Games {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Season},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TeamIds},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-Games' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/seasons/{season}/games.json'
        if (!$Season) {
            throw "Error! The required parameter `Season` missing when calling getGames."
        }
        $LocalVarUri = $LocalVarUri.replace('{season}', [System.Web.HTTPUtility]::UrlEncode($Season))

        if ($TeamIds) {
            $LocalVarQueryParameters['teamIds[]'] = $TeamIds
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
            -Uri $LocalVarUri `
            -Accepts $LocalVarAccepts `
            -ContentTypes $LocalVarContentTypes `
            -Body $LocalVarBodyParameter `
            -HeaderParameters $LocalVarHeaderParameters `
            -QueryParameters $LocalVarQueryParameters `
            -FormParameters $LocalVarFormParameters `
            -CookieParameters $LocalVarCookieParameters `
            -ReturnType 'Game[]' `
            -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult['Response']
        }
    }
}

