#
# Öppet API för SHL
# Version: 1.0
# Contact: support@shl.se
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

Get a top list of goalkeepers statistics

.DESCRIPTION

No description available.

.PARAMETER Season
Season to be used, i.e. '2019' for the SHL season 2019/2020

.PARAMETER Sort
Order of which the top list should be sorted, can be any of the following valued saves, savesPercent, goalsAgainst, goalsAgainstAverage, won, tied, lost, shooutOuts or minutesInPlay

.PARAMETER TeamIds
For which team(s) should the top list be based on

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

GoalkeeperStatistics[]
#>
function Get-GoalkeeperStatistics {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Season},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Sort},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TeamIds},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-GoalkeeperStatistics' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/seasons/{season}/statistics/goalkeepers.json'
        if (!$Season) {
            throw "Error! The required parameter `Season` missing when calling getGoalkeeperStatistics."
        }
        $LocalVarUri = $LocalVarUri.replace('{season}', [System.Web.HTTPUtility]::UrlEncode($Season))

        if ($Sort) {
            $LocalVarQueryParameters['sort'] = $Sort
        }

        if ($TeamIds) {
            $LocalVarQueryParameters['teamIds[]'] = $TeamIds
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
            -Uri $LocalVarUri `
            -Accepts $LocalVarAccepts `
            -ContentTypes $LocalVarContentTypes `
            -Body $LocalVarBodyParameter `
            -HeaderParameters $LocalVarHeaderParameters `
            -QueryParameters $LocalVarQueryParameters `
            -FormParameters $LocalVarFormParameters `
            -CookieParameters $LocalVarCookieParameters `
            -ReturnType 'GoalkeeperStatistics[]' `
            -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult['Response']
        }
    }
}

<#
.SYNOPSIS

Get a top list of player statistics

.DESCRIPTION

No description available.

.PARAMETER Season
Season to be used, i.e. '2019' for the SHL season 2019/2020

.PARAMETER Sort
Order of which the top list should be sorted, can be one of the following values assists, goals, points, pim, hits or plusminus

.PARAMETER TeamIds
For which team(s) should the top list be based on

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PlayerStatistics[]
#>
function Get-PlayersStatistics {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Season},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Sort},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TeamIds},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-PlayersStatistics' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/seasons/{season}/statistics/players.json'
        if (!$Season) {
            throw "Error! The required parameter `Season` missing when calling getPlayersStatistics."
        }
        $LocalVarUri = $LocalVarUri.replace('{season}', [System.Web.HTTPUtility]::UrlEncode($Season))

        if ($Sort) {
            $LocalVarQueryParameters['sort'] = $Sort
        }

        if ($TeamIds) {
            $LocalVarQueryParameters['teamIds[]'] = $TeamIds
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
            -Uri $LocalVarUri `
            -Accepts $LocalVarAccepts `
            -ContentTypes $LocalVarContentTypes `
            -Body $LocalVarBodyParameter `
            -HeaderParameters $LocalVarHeaderParameters `
            -QueryParameters $LocalVarQueryParameters `
            -FormParameters $LocalVarFormParameters `
            -CookieParameters $LocalVarCookieParameters `
            -ReturnType 'PlayerStatistics[]' `
            -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult['Response']
        }
    }
}

<#
.SYNOPSIS

Get the team standings for selected season

.DESCRIPTION

No description available.

.PARAMETER Season
Season to be used, i.e. '2019' for the SHL season 2019/2020

.PARAMETER TeamIds
For which team(s) should the top list be based on

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

TeamStandings[]
#>
function Get-TeamsStandings {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Season},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TeamIds},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-TeamsStandings' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/seasons/{season}/statistics/teams/standings.json'
        if (!$Season) {
            throw "Error! The required parameter `Season` missing when calling getTeamsStandings."
        }
        $LocalVarUri = $LocalVarUri.replace('{season}', [System.Web.HTTPUtility]::UrlEncode($Season))

        if ($TeamIds) {
            $LocalVarQueryParameters['teamIds[]'] = $TeamIds
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
            -Uri $LocalVarUri `
            -Accepts $LocalVarAccepts `
            -ContentTypes $LocalVarContentTypes `
            -Body $LocalVarBodyParameter `
            -HeaderParameters $LocalVarHeaderParameters `
            -QueryParameters $LocalVarQueryParameters `
            -FormParameters $LocalVarFormParameters `
            -CookieParameters $LocalVarCookieParameters `
            -ReturnType 'TeamStandings[]' `
            -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult['Response']
        }
    }
}

