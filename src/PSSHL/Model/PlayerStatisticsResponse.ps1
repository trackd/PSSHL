#
# Öppet API för SHL
# Version: 1.0
# Contact: support@shl.se
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER PlayerStatistics
No description available.
.PARAMETER Metadata
The number of games the player have participated in during the selected season
.OUTPUTS

PlayerStatisticsResponse<PSCustomObject>
#>

function Initialize-PlayerStatisticsResponse {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PlayerStatistics},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Metadata}
    )

    Process {
        'Creating PSCustomObject: PSSHL => PlayerStatisticsResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $PlayerStatistics) {
            throw "invalid value for 'PlayerStatistics', 'PlayerStatistics' cannot be null."
        }

        if ($null -eq $Metadata) {
            throw "invalid value for 'Metadata', 'Metadata' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            'PlayerStatistics' = ${PlayerStatistics}
            'Metadata'         = ${Metadata}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PlayerStatisticsResponse<PSCustomObject>

.DESCRIPTION

Convert from JSON to PlayerStatisticsResponse<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PlayerStatisticsResponse<PSCustomObject>
#>
function ConvertFrom-JsonToPlayerStatisticsResponse {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSHL => PlayerStatisticsResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PlayerStatisticsResponse
        $AllProperties = ('PlayerStatistics', 'Metadata')
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq '{}') {
            # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'PlayerStatistics' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'PlayerStatistics'))) {
            throw "Error! JSON cannot be serialized due to the required property 'PlayerStatistics' missing."
        } else {
            $PlayerStatistics = $JsonParameters.PSobject.Properties['PlayerStatistics'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'Metadata'))) {
            throw "Error! JSON cannot be serialized due to the required property 'Metadata' missing."
        } else {
            $Metadata = $JsonParameters.PSobject.Properties['Metadata'].value
        }

        $PSO = [PSCustomObject]@{
            'PlayerStatistics' = ${PlayerStatistics}
            'Metadata'         = ${Metadata}
        }

        return $PSO
    }

}

