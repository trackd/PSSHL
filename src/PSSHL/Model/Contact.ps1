#
# Öppet API för SHL
# Version: 1.0
# Contact: support@shl.se
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Address
Address to the team
.PARAMETER Phone
Phone number to the team
.PARAMETER Email
Email address to the team
.OUTPUTS

Contact<PSCustomObject>
#>

function Initialize-Contact {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Address},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Phone},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Email}
    )

    Process {
        'Creating PSCustomObject: PSSHL => Contact' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Address) {
            throw "invalid value for 'Address', 'Address' cannot be null."
        }

        if ($null -eq $Phone) {
            throw "invalid value for 'Phone', 'Phone' cannot be null."
        }

        if ($null -eq $Email) {
            throw "invalid value for 'Email', 'Email' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            'address' = ${Address}
            'phone'   = ${Phone}
            'email'   = ${Email}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Contact<PSCustomObject>

.DESCRIPTION

Convert from JSON to Contact<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Contact<PSCustomObject>
#>
function ConvertFrom-JsonToContact {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSHL => Contact' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Contact
        $AllProperties = ('address', 'phone', 'email')
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq '{}') {
            # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'address' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'address'))) {
            throw "Error! JSON cannot be serialized due to the required property 'address' missing."
        } else {
            $Address = $JsonParameters.PSobject.Properties['address'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'phone'))) {
            throw "Error! JSON cannot be serialized due to the required property 'phone' missing."
        } else {
            $Phone = $JsonParameters.PSobject.Properties['phone'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'email'))) {
            throw "Error! JSON cannot be serialized due to the required property 'email' missing."
        } else {
            $Email = $JsonParameters.PSobject.Properties['email'].value
        }

        $PSO = [PSCustomObject]@{
            'address' = ${Address}
            'phone'   = ${Phone}
            'email'   = ${Email}
        }

        return $PSO
    }

}

