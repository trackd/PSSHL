#
# Öppet API för SHL
# Version: 1.0
# Contact: support@shl.se
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER PlayerId
The id of the player
.PARAMETER DefaultJersey
The default jersey of the player
.PARAMETER ShootsRight
Indicates if the player is a right shooter
.PARAMETER Shoots
Indicates from what side player is shooting
.PARAMETER Position
The position of the player
.PARAMETER Captain
Indicates if the player is the captain of the team
.PARAMETER Assistant
Indicates if the player is an assistant captain of the team
.PARAMETER Height
Height of the player in centimeter
.PARAMETER Weight
Weight of the player in kilogram
.PARAMETER DateOfBirth
Date of birth of the player (YYYY-mm-dd)
.PARAMETER PlayerUrlDesktop
URL to get more information about the player (desktop version)
.PARAMETER PlayerUrlMobile
URL to get more information about the player (mobile version)
.PARAMETER FirstName
The first name of the person
.PARAMETER LastName
The last name of the person
.PARAMETER Nationality
The nationality of the person
.PARAMETER ShortDescription
A short description of the person
.OUTPUTS

Player<PSCustomObject>
#>

function Initialize-Player {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PlayerId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${DefaultJersey},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${ShootsRight},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Shoots},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet('GK', 'LD', 'RD', 'LW', 'CE', 'RW')]
        [String]
        ${Position},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${Captain},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${Assistant},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Height},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Weight},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DateOfBirth},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PlayerUrlDesktop},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PlayerUrlMobile},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FirstName},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LastName},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Nationality},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ShortDescription}
    )

    Process {
        'Creating PSCustomObject: PSSHL => Player' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $PlayerId) {
            throw "invalid value for 'PlayerId', 'PlayerId' cannot be null."
        }

        if ($null -eq $DefaultJersey) {
            throw "invalid value for 'DefaultJersey', 'DefaultJersey' cannot be null."
        }

        if ($null -eq $ShootsRight) {
            throw "invalid value for 'ShootsRight', 'ShootsRight' cannot be null."
        }

        if ($null -eq $Position) {
            throw "invalid value for 'Position', 'Position' cannot be null."
        }

        if ($null -eq $Captain) {
            throw "invalid value for 'Captain', 'Captain' cannot be null."
        }

        if ($null -eq $Assistant) {
            throw "invalid value for 'Assistant', 'Assistant' cannot be null."
        }

        if ($null -eq $Height) {
            throw "invalid value for 'Height', 'Height' cannot be null."
        }

        if ($null -eq $Weight) {
            throw "invalid value for 'Weight', 'Weight' cannot be null."
        }

        if ($null -eq $DateOfBirth) {
            throw "invalid value for 'DateOfBirth', 'DateOfBirth' cannot be null."
        }

        if ($null -eq $PlayerUrlDesktop) {
            throw "invalid value for 'PlayerUrlDesktop', 'PlayerUrlDesktop' cannot be null."
        }

        if ($null -eq $PlayerUrlMobile) {
            throw "invalid value for 'PlayerUrlMobile', 'PlayerUrlMobile' cannot be null."
        }

        if ($null -eq $FirstName) {
            throw "invalid value for 'FirstName', 'FirstName' cannot be null."
        }

        if ($null -eq $LastName) {
            throw "invalid value for 'LastName', 'LastName' cannot be null."
        }

        if ($null -eq $Nationality) {
            throw "invalid value for 'Nationality', 'Nationality' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            'player_id'          = ${PlayerId}
            'default_jersey'     = ${DefaultJersey}
            'shoots_right'       = ${ShootsRight}
            'shoots'             = ${Shoots}
            'position'           = ${Position}
            'captain'            = ${Captain}
            'assistant'          = ${Assistant}
            'height'             = ${Height}
            'weight'             = ${Weight}
            'date_of_birth'      = ${DateOfBirth}
            'player_url_desktop' = ${PlayerUrlDesktop}
            'player_url_mobile'  = ${PlayerUrlMobile}
            'first_name'         = ${FirstName}
            'last_name'          = ${LastName}
            'nationality'        = ${Nationality}
            'short_description'  = ${ShortDescription}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Player<PSCustomObject>

.DESCRIPTION

Convert from JSON to Player<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Player<PSCustomObject>
#>
function ConvertFrom-JsonToPlayer {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSHL => Player' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Player
        $AllProperties = ('player_id', 'default_jersey', 'shoots_right', 'shoots', 'position', 'captain', 'assistant', 'height', 'weight', 'date_of_birth', 'player_url_desktop', 'player_url_mobile', 'first_name', 'last_name', 'nationality', 'short_description')
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq '{}') {
            # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'player_id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'player_id'))) {
            throw "Error! JSON cannot be serialized due to the required property 'player_id' missing."
        } else {
            $PlayerId = $JsonParameters.PSobject.Properties['player_id'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'default_jersey'))) {
            throw "Error! JSON cannot be serialized due to the required property 'default_jersey' missing."
        } else {
            $DefaultJersey = $JsonParameters.PSobject.Properties['default_jersey'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'shoots_right'))) {
            throw "Error! JSON cannot be serialized due to the required property 'shoots_right' missing."
        } else {
            $ShootsRight = $JsonParameters.PSobject.Properties['shoots_right'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'position'))) {
            throw "Error! JSON cannot be serialized due to the required property 'position' missing."
        } else {
            $Position = $JsonParameters.PSobject.Properties['position'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'captain'))) {
            throw "Error! JSON cannot be serialized due to the required property 'captain' missing."
        } else {
            $Captain = $JsonParameters.PSobject.Properties['captain'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'assistant'))) {
            throw "Error! JSON cannot be serialized due to the required property 'assistant' missing."
        } else {
            $Assistant = $JsonParameters.PSobject.Properties['assistant'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'height'))) {
            throw "Error! JSON cannot be serialized due to the required property 'height' missing."
        } else {
            $Height = $JsonParameters.PSobject.Properties['height'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'weight'))) {
            throw "Error! JSON cannot be serialized due to the required property 'weight' missing."
        } else {
            $Weight = $JsonParameters.PSobject.Properties['weight'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'date_of_birth'))) {
            throw "Error! JSON cannot be serialized due to the required property 'date_of_birth' missing."
        } else {
            $DateOfBirth = $JsonParameters.PSobject.Properties['date_of_birth'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'player_url_desktop'))) {
            throw "Error! JSON cannot be serialized due to the required property 'player_url_desktop' missing."
        } else {
            $PlayerUrlDesktop = $JsonParameters.PSobject.Properties['player_url_desktop'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'player_url_mobile'))) {
            throw "Error! JSON cannot be serialized due to the required property 'player_url_mobile' missing."
        } else {
            $PlayerUrlMobile = $JsonParameters.PSobject.Properties['player_url_mobile'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'first_name'))) {
            throw "Error! JSON cannot be serialized due to the required property 'first_name' missing."
        } else {
            $FirstName = $JsonParameters.PSobject.Properties['first_name'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'last_name'))) {
            throw "Error! JSON cannot be serialized due to the required property 'last_name' missing."
        } else {
            $LastName = $JsonParameters.PSobject.Properties['last_name'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'nationality'))) {
            throw "Error! JSON cannot be serialized due to the required property 'nationality' missing."
        } else {
            $Nationality = $JsonParameters.PSobject.Properties['nationality'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'shoots'))) {
            #optional property not found
            $Shoots = $null
        } else {
            $Shoots = $JsonParameters.PSobject.Properties['shoots'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'short_description'))) {
            #optional property not found
            $ShortDescription = $null
        } else {
            $ShortDescription = $JsonParameters.PSobject.Properties['short_description'].value
        }

        $PSO = [PSCustomObject]@{
            'player_id'          = ${PlayerId}
            'default_jersey'     = ${DefaultJersey}
            'shoots_right'       = ${ShootsRight}
            'shoots'             = ${Shoots}
            'position'           = ${Position}
            'captain'            = ${Captain}
            'assistant'          = ${Assistant}
            'height'             = ${Height}
            'weight'             = ${Weight}
            'date_of_birth'      = ${DateOfBirth}
            'player_url_desktop' = ${PlayerUrlDesktop}
            'player_url_mobile'  = ${PlayerUrlMobile}
            'first_name'         = ${FirstName}
            'last_name'          = ${LastName}
            'nationality'        = ${Nationality}
            'short_description'  = ${ShortDescription}
        }

        return $PSO
    }

}

