#
# Öppet API för SHL
# Version: 1.0
# Contact: support@shl.se
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER PlayerId
Id of the player
.PARAMETER Info
No description available.
.PARAMETER GP
The number of games the goalkeeper was on the line up during the selected season
.PARAMETER GPI
The number of games the goalkeeper was actually on ice during the selected season
.PARAMETER Rank
The ranking of the goalkeeper based on the sorting order for the selected season
.PARAMETER GA
The number of goals against the goalkeeper during the selected season
.PARAMETER GAA
The average of goals against the goalkeeper per 60 minutes on ice during the selected season
.PARAMETER GS
The number of games the goalkeeper started in during the selected season
.PARAMETER L
The number of lost games for the goalkeeper during the selected season
.PARAMETER MIP
 the goalkeeper during the selected season
.PARAMETER SO
The number of games the goalkeeper didnt have any goals against during the selected season
.PARAMETER SOGA
The number of shoots against the goal including goals for the goalkeeper during the selected season
.PARAMETER SVS
The number of saves the goalkeeper have made during the selected season
.PARAMETER SVSPerc
The saves percentage of the goalkeeper during the selected season
.PARAMETER T
The number of tied games for the goalkeeper during the selected season
.PARAMETER ValidRanking
Is the ranking valid for the goalkeeper during the selected season, e.g. the number of games is enough for the statistics to be correctly calculated
.PARAMETER W
The number of won games for the goalkeeper during the selected season
.OUTPUTS

GoalkeeperStatistics<PSCustomObject>
#>

function Initialize-GoalkeeperStatistics {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${PlayerId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Info},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${GP},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${GPI},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Rank},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${GA},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${GAA},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${GS},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${L},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MIP},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${SO},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${SOGA},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${SVS},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${SVSPerc},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${T},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${ValidRanking},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${W}
    )

    Process {
        'Creating PSCustomObject: PSSHL => GoalkeeperStatistics' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $PlayerId) {
            throw "invalid value for 'PlayerId', 'PlayerId' cannot be null."
        }

        if ($null -eq $Info) {
            throw "invalid value for 'Info', 'Info' cannot be null."
        }

        if ($null -eq $GP) {
            throw "invalid value for 'GP', 'GP' cannot be null."
        }

        if ($null -eq $GPI) {
            throw "invalid value for 'GPI', 'GPI' cannot be null."
        }

        if ($null -eq $Rank) {
            throw "invalid value for 'Rank', 'Rank' cannot be null."
        }

        if ($null -eq $GA) {
            throw "invalid value for 'GA', 'GA' cannot be null."
        }

        if ($null -eq $GAA) {
            throw "invalid value for 'GAA', 'GAA' cannot be null."
        }

        if ($null -eq $GS) {
            throw "invalid value for 'GS', 'GS' cannot be null."
        }

        if ($null -eq $L) {
            throw "invalid value for 'L', 'L' cannot be null."
        }

        if ($null -eq $MIP) {
            throw "invalid value for 'MIP', 'MIP' cannot be null."
        }

        if ($null -eq $SO) {
            throw "invalid value for 'SO', 'SO' cannot be null."
        }

        if ($null -eq $SOGA) {
            throw "invalid value for 'SOGA', 'SOGA' cannot be null."
        }

        if ($null -eq $SVS) {
            throw "invalid value for 'SVS', 'SVS' cannot be null."
        }

        if ($null -eq $SVSPerc) {
            throw "invalid value for 'SVSPerc', 'SVSPerc' cannot be null."
        }

        if ($null -eq $T) {
            throw "invalid value for 'T', 'T' cannot be null."
        }

        if ($null -eq $ValidRanking) {
            throw "invalid value for 'ValidRanking', 'ValidRanking' cannot be null."
        }

        if ($null -eq $W) {
            throw "invalid value for 'W', 'W' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            'PlayerId'     = ${PlayerId}
            'Info'         = ${Info}
            'GP'           = ${GP}
            'GPI'          = ${GPI}
            'Rank'         = ${Rank}
            'GA'           = ${GA}
            'GAA'          = ${GAA}
            'GS'           = ${GS}
            'L'            = ${L}
            'MIP'          = ${MIP}
            'SO'           = ${SO}
            'SOGA'         = ${SOGA}
            'SVS'          = ${SVS}
            'SVSPerc'      = ${SVSPerc}
            'T'            = ${T}
            'ValidRanking' = ${ValidRanking}
            'W'            = ${W}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GoalkeeperStatistics<PSCustomObject>

.DESCRIPTION

Convert from JSON to GoalkeeperStatistics<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GoalkeeperStatistics<PSCustomObject>
#>
function ConvertFrom-JsonToGoalkeeperStatistics {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSHL => GoalkeeperStatistics' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GoalkeeperStatistics
        $AllProperties = ('PlayerId', 'Info', 'GP', 'GPI', 'Rank', 'GA', 'GAA', 'GS', 'L', 'MIP', 'SO', 'SOGA', 'SVS', 'SVSPerc', 'T', 'ValidRanking', 'W')
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq '{}') {
            # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'PlayerId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'PlayerId'))) {
            throw "Error! JSON cannot be serialized due to the required property 'PlayerId' missing."
        } else {
            $PlayerId = $JsonParameters.PSobject.Properties['PlayerId'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'Info'))) {
            throw "Error! JSON cannot be serialized due to the required property 'Info' missing."
        } else {
            $Info = $JsonParameters.PSobject.Properties['Info'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'GP'))) {
            throw "Error! JSON cannot be serialized due to the required property 'GP' missing."
        } else {
            $GP = $JsonParameters.PSobject.Properties['GP'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'GPI'))) {
            throw "Error! JSON cannot be serialized due to the required property 'GPI' missing."
        } else {
            $GPI = $JsonParameters.PSobject.Properties['GPI'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'Rank'))) {
            throw "Error! JSON cannot be serialized due to the required property 'Rank' missing."
        } else {
            $Rank = $JsonParameters.PSobject.Properties['Rank'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'GA'))) {
            throw "Error! JSON cannot be serialized due to the required property 'GA' missing."
        } else {
            $GA = $JsonParameters.PSobject.Properties['GA'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'GAA'))) {
            throw "Error! JSON cannot be serialized due to the required property 'GAA' missing."
        } else {
            $GAA = $JsonParameters.PSobject.Properties['GAA'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'GS'))) {
            throw "Error! JSON cannot be serialized due to the required property 'GS' missing."
        } else {
            $GS = $JsonParameters.PSobject.Properties['GS'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'L'))) {
            throw "Error! JSON cannot be serialized due to the required property 'L' missing."
        } else {
            $L = $JsonParameters.PSobject.Properties['L'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'MIP'))) {
            throw "Error! JSON cannot be serialized due to the required property 'MIP' missing."
        } else {
            $MIP = $JsonParameters.PSobject.Properties['MIP'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'SO'))) {
            throw "Error! JSON cannot be serialized due to the required property 'SO' missing."
        } else {
            $SO = $JsonParameters.PSobject.Properties['SO'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'SOGA'))) {
            throw "Error! JSON cannot be serialized due to the required property 'SOGA' missing."
        } else {
            $SOGA = $JsonParameters.PSobject.Properties['SOGA'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'SVS'))) {
            throw "Error! JSON cannot be serialized due to the required property 'SVS' missing."
        } else {
            $SVS = $JsonParameters.PSobject.Properties['SVS'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'SVSPerc'))) {
            throw "Error! JSON cannot be serialized due to the required property 'SVSPerc' missing."
        } else {
            $SVSPerc = $JsonParameters.PSobject.Properties['SVSPerc'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'T'))) {
            throw "Error! JSON cannot be serialized due to the required property 'T' missing."
        } else {
            $T = $JsonParameters.PSobject.Properties['T'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'ValidRanking'))) {
            throw "Error! JSON cannot be serialized due to the required property 'ValidRanking' missing."
        } else {
            $ValidRanking = $JsonParameters.PSobject.Properties['ValidRanking'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'W'))) {
            throw "Error! JSON cannot be serialized due to the required property 'W' missing."
        } else {
            $W = $JsonParameters.PSobject.Properties['W'].value
        }

        $PSO = [PSCustomObject]@{
            'PlayerId'     = ${PlayerId}
            'Info'         = ${Info}
            'GP'           = ${GP}
            'GPI'          = ${GPI}
            'Rank'         = ${Rank}
            'GA'           = ${GA}
            'GAA'          = ${GAA}
            'GS'           = ${GS}
            'L'            = ${L}
            'MIP'          = ${MIP}
            'SO'           = ${SO}
            'SOGA'         = ${SOGA}
            'SVS'          = ${SVS}
            'SVSPerc'      = ${SVSPerc}
            'T'            = ${T}
            'ValidRanking' = ${ValidRanking}
            'W'            = ${W}
        }

        return $PSO
    }

}

