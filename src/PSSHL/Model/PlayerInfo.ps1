#
# Öppet API för SHL
# Version: 1.0
# Contact: support@shl.se
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER PlayerId
Id of the player
.PARAMETER FirstName
First name of the player
.PARAMETER LastName
Last name of the player
.PARAMETER Number
The jersey of the player
.PARAMETER Position
The position of the player
.PARAMETER Birthdate
The birthdate of the player
.PARAMETER Height
The height of the player (in centimeters)
.PARAMETER Nationality
The nationality of the player
.PARAMETER Team
No description available.
.PARAMETER Teams
An array of team codes the player have played for during the selected season
.PARAMETER TeamCode
The team code of the team the player belongs to
.PARAMETER Weight
The weight of the player (in kilograms)
.OUTPUTS

PlayerInfo<PSCustomObject>
#>

function Initialize-PlayerInfo {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${PlayerId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FirstName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LastName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Number},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Position},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Birthdate},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Height},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Nationality},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Team},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Teams},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TeamCode},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Weight}
    )

    Process {
        'Creating PSCustomObject: PSSHL => PlayerInfo' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $PlayerId) {
            throw "invalid value for 'PlayerId', 'PlayerId' cannot be null."
        }

        if ($null -eq $FirstName) {
            throw "invalid value for 'FirstName', 'FirstName' cannot be null."
        }

        if ($null -eq $LastName) {
            throw "invalid value for 'LastName', 'LastName' cannot be null."
        }

        if ($null -eq $Number) {
            throw "invalid value for 'Number', 'Number' cannot be null."
        }

        if ($null -eq $Position) {
            throw "invalid value for 'Position', 'Position' cannot be null."
        }

        if ($null -eq $Birthdate) {
            throw "invalid value for 'Birthdate', 'Birthdate' cannot be null."
        }

        if ($null -eq $Height) {
            throw "invalid value for 'Height', 'Height' cannot be null."
        }

        if ($null -eq $Nationality) {
            throw "invalid value for 'Nationality', 'Nationality' cannot be null."
        }

        if ($null -eq $Team) {
            throw "invalid value for 'Team', 'Team' cannot be null."
        }

        if ($null -eq $Teams) {
            throw "invalid value for 'Teams', 'Teams' cannot be null."
        }

        if ($null -eq $TeamCode) {
            throw "invalid value for 'TeamCode', 'TeamCode' cannot be null."
        }

        if ($null -eq $Weight) {
            throw "invalid value for 'Weight', 'Weight' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            'PlayerId'    = ${PlayerId}
            'FirstName'   = ${FirstName}
            'LastName'    = ${LastName}
            'Number'      = ${Number}
            'Position'    = ${Position}
            'Birthdate'   = ${Birthdate}
            'Height'      = ${Height}
            'Nationality' = ${Nationality}
            'Team'        = ${Team}
            'Teams'       = ${Teams}
            'TeamCode'    = ${TeamCode}
            'Weight'      = ${Weight}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PlayerInfo<PSCustomObject>

.DESCRIPTION

Convert from JSON to PlayerInfo<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PlayerInfo<PSCustomObject>
#>
function ConvertFrom-JsonToPlayerInfo {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSHL => PlayerInfo' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PlayerInfo
        $AllProperties = ('PlayerId', 'FirstName', 'LastName', 'Number', 'Position', 'Birthdate', 'Height', 'Nationality', 'Team', 'Teams', 'TeamCode', 'Weight')
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq '{}') {
            # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'PlayerId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'PlayerId'))) {
            throw "Error! JSON cannot be serialized due to the required property 'PlayerId' missing."
        } else {
            $PlayerId = $JsonParameters.PSobject.Properties['PlayerId'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'FirstName'))) {
            throw "Error! JSON cannot be serialized due to the required property 'FirstName' missing."
        } else {
            $FirstName = $JsonParameters.PSobject.Properties['FirstName'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'LastName'))) {
            throw "Error! JSON cannot be serialized due to the required property 'LastName' missing."
        } else {
            $LastName = $JsonParameters.PSobject.Properties['LastName'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'Number'))) {
            throw "Error! JSON cannot be serialized due to the required property 'Number' missing."
        } else {
            $Number = $JsonParameters.PSobject.Properties['Number'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'Position'))) {
            throw "Error! JSON cannot be serialized due to the required property 'Position' missing."
        } else {
            $Position = $JsonParameters.PSobject.Properties['Position'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'Birthdate'))) {
            throw "Error! JSON cannot be serialized due to the required property 'Birthdate' missing."
        } else {
            $Birthdate = $JsonParameters.PSobject.Properties['Birthdate'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'Height'))) {
            throw "Error! JSON cannot be serialized due to the required property 'Height' missing."
        } else {
            $Height = $JsonParameters.PSobject.Properties['Height'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'Nationality'))) {
            throw "Error! JSON cannot be serialized due to the required property 'Nationality' missing."
        } else {
            $Nationality = $JsonParameters.PSobject.Properties['Nationality'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'Team'))) {
            throw "Error! JSON cannot be serialized due to the required property 'Team' missing."
        } else {
            $Team = $JsonParameters.PSobject.Properties['Team'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'Teams'))) {
            throw "Error! JSON cannot be serialized due to the required property 'Teams' missing."
        } else {
            $Teams = $JsonParameters.PSobject.Properties['Teams'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'TeamCode'))) {
            throw "Error! JSON cannot be serialized due to the required property 'TeamCode' missing."
        } else {
            $TeamCode = $JsonParameters.PSobject.Properties['TeamCode'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'Weight'))) {
            throw "Error! JSON cannot be serialized due to the required property 'Weight' missing."
        } else {
            $Weight = $JsonParameters.PSobject.Properties['Weight'].value
        }

        $PSO = [PSCustomObject]@{
            'PlayerId'    = ${PlayerId}
            'FirstName'   = ${FirstName}
            'LastName'    = ${LastName}
            'Number'      = ${Number}
            'Position'    = ${Position}
            'Birthdate'   = ${Birthdate}
            'Height'      = ${Height}
            'Nationality' = ${Nationality}
            'Team'        = ${Team}
            'Teams'       = ${Teams}
            'TeamCode'    = ${TeamCode}
            'Weight'      = ${Weight}
        }

        return $PSO
    }

}

