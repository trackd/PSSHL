#
# Öppet API för SHL
# Version: 1.0
# Contact: support@shl.se
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER VideoId
Id of the video
.PARAMETER Length
Length of the video in seconds
.PARAMETER Name
Name of the video
.PARAMETER TeamCode
Team code of the team the video belongs too
.PARAMETER ShortDescription
A description of the video
.PARAMETER PublishDate
Publish date of the video
.PARAMETER VideoPlaybackUrl
URL to the playback of the video
.OUTPUTS

Video<PSCustomObject>
#>

function Initialize-Video {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${VideoId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Length},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TeamCode},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ShortDescription},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.DateTime]
        ${PublishDate},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VideoPlaybackUrl}
    )

    Process {
        'Creating PSCustomObject: PSSHL => Video' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $VideoId) {
            throw "invalid value for 'VideoId', 'VideoId' cannot be null."
        }

        if ($null -eq $Length) {
            throw "invalid value for 'Length', 'Length' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($null -eq $TeamCode) {
            throw "invalid value for 'TeamCode', 'TeamCode' cannot be null."
        }

        if ($null -eq $ShortDescription) {
            throw "invalid value for 'ShortDescription', 'ShortDescription' cannot be null."
        }

        if ($null -eq $PublishDate) {
            throw "invalid value for 'PublishDate', 'PublishDate' cannot be null."
        }

        if ($null -eq $VideoPlaybackUrl) {
            throw "invalid value for 'VideoPlaybackUrl', 'VideoPlaybackUrl' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            'video_id'           = ${VideoId}
            'length'             = ${Length}
            'name'               = ${Name}
            'team_code'          = ${TeamCode}
            'short_description'  = ${ShortDescription}
            'publish_date'       = ${PublishDate}
            'video_playback_url' = ${VideoPlaybackUrl}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Video<PSCustomObject>

.DESCRIPTION

Convert from JSON to Video<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Video<PSCustomObject>
#>
function ConvertFrom-JsonToVideo {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSHL => Video' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Video
        $AllProperties = ('video_id', 'length', 'name', 'team_code', 'short_description', 'publish_date', 'video_playback_url')
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq '{}') {
            # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'video_id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'video_id'))) {
            throw "Error! JSON cannot be serialized due to the required property 'video_id' missing."
        } else {
            $VideoId = $JsonParameters.PSobject.Properties['video_id'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'length'))) {
            throw "Error! JSON cannot be serialized due to the required property 'length' missing."
        } else {
            $Length = $JsonParameters.PSobject.Properties['length'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'name'))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties['name'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'team_code'))) {
            throw "Error! JSON cannot be serialized due to the required property 'team_code' missing."
        } else {
            $TeamCode = $JsonParameters.PSobject.Properties['team_code'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'short_description'))) {
            throw "Error! JSON cannot be serialized due to the required property 'short_description' missing."
        } else {
            $ShortDescription = $JsonParameters.PSobject.Properties['short_description'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'publish_date'))) {
            throw "Error! JSON cannot be serialized due to the required property 'publish_date' missing."
        } else {
            $PublishDate = $JsonParameters.PSobject.Properties['publish_date'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'video_playback_url'))) {
            throw "Error! JSON cannot be serialized due to the required property 'video_playback_url' missing."
        } else {
            $VideoPlaybackUrl = $JsonParameters.PSobject.Properties['video_playback_url'].value
        }

        $PSO = [PSCustomObject]@{
            'video_id'           = ${VideoId}
            'length'             = ${Length}
            'name'               = ${Name}
            'team_code'          = ${TeamCode}
            'short_description'  = ${ShortDescription}
            'publish_date'       = ${PublishDate}
            'video_playback_url' = ${VideoPlaybackUrl}
        }

        return $PSO
    }

}

