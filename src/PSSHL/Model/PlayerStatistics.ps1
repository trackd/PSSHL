#
# Öppet API för SHL
# Version: 1.0
# Contact: support@shl.se
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER PlayerId
Id of the player
.PARAMETER GP
The number of games the player have participated in during the selected season
.PARAMETER Info
No description available.
.PARAMETER Rank
The rank of the player based on sort order for the selected season
.PARAMETER TOI
The totalt number of seconds the player have been on ice during the selected season
.PARAMETER TOIGP
The average time the player have been on ice during played games for the selected season, format MM:SS
.PARAMETER A
The number of assists the player have done during the selected season
.PARAMETER BkS
The number of blocked shots the player have done during the selected season
.PARAMETER G
The number of goals the player have done during the selected season
.PARAMETER GWG
The number of game winning goals the player have done during the selected season
.PARAMETER Hits
The number of hits the player have done during the selected season
.PARAMETER Minus
The number of goals against the player have been on ice during the selected season
.PARAMETER PIM
The number of minutes the player have been penaliced for during the selected season
.PARAMETER PPG
The number of power play goals the player have done during the selected season
.PARAMETER Plus
The number of goals forward the player have been on ice during the selected season
.PARAMETER PlusMinus
The number of goals forward/against the player have been on ice during the selected season
.PARAMETER SOG
The number of shots on goal the player have done during the selected season
.PARAMETER TP
The number of points the player have done during the selected season
.OUTPUTS

PlayerStatistics<PSCustomObject>
#>

function Initialize-PlayerStatistics {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${PlayerId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${GP},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Info},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Rank},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${TOI},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TOIGP},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${A},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${BkS},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${G},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${GWG},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Hits},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Minus},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${PIM},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${PPG},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Plus},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${PlusMinus},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${SOG},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${TP}
    )

    Process {
        'Creating PSCustomObject: PSSHL => PlayerStatistics' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $PlayerId) {
            throw "invalid value for 'PlayerId', 'PlayerId' cannot be null."
        }

        if ($null -eq $GP) {
            throw "invalid value for 'GP', 'GP' cannot be null."
        }

        if ($null -eq $Info) {
            throw "invalid value for 'Info', 'Info' cannot be null."
        }

        if ($null -eq $Rank) {
            throw "invalid value for 'Rank', 'Rank' cannot be null."
        }

        if ($null -eq $TOI) {
            throw "invalid value for 'TOI', 'TOI' cannot be null."
        }

        if ($null -eq $TOIGP) {
            throw "invalid value for 'TOIGP', 'TOIGP' cannot be null."
        }

        if ($null -eq $A) {
            throw "invalid value for 'A', 'A' cannot be null."
        }

        if ($null -eq $BkS) {
            throw "invalid value for 'BkS', 'BkS' cannot be null."
        }

        if ($null -eq $G) {
            throw "invalid value for 'G', 'G' cannot be null."
        }

        if ($null -eq $GWG) {
            throw "invalid value for 'GWG', 'GWG' cannot be null."
        }

        if ($null -eq $Hits) {
            throw "invalid value for 'Hits', 'Hits' cannot be null."
        }

        if ($null -eq $Minus) {
            throw "invalid value for 'Minus', 'Minus' cannot be null."
        }

        if ($null -eq $PIM) {
            throw "invalid value for 'PIM', 'PIM' cannot be null."
        }

        if ($null -eq $PPG) {
            throw "invalid value for 'PPG', 'PPG' cannot be null."
        }

        if ($null -eq $Plus) {
            throw "invalid value for 'Plus', 'Plus' cannot be null."
        }

        if ($null -eq $PlusMinus) {
            throw "invalid value for 'PlusMinus', 'PlusMinus' cannot be null."
        }

        if ($null -eq $SOG) {
            throw "invalid value for 'SOG', 'SOG' cannot be null."
        }

        if ($null -eq $TP) {
            throw "invalid value for 'TP', 'TP' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            'PlayerId'  = ${PlayerId}
            'GP'        = ${GP}
            'Info'      = ${Info}
            'Rank'      = ${Rank}
            'TOI'       = ${TOI}
            'TOI_GP'    = ${TOIGP}
            'A'         = ${A}
            'BkS'       = ${BkS}
            'G'         = ${G}
            'GWG'       = ${GWG}
            'Hits'      = ${Hits}
            'Minus'     = ${Minus}
            'PIM'       = ${PIM}
            'PPG'       = ${PPG}
            'Plus'      = ${Plus}
            'PlusMinus' = ${PlusMinus}
            'SOG'       = ${SOG}
            'TP'        = ${TP}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PlayerStatistics<PSCustomObject>

.DESCRIPTION

Convert from JSON to PlayerStatistics<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PlayerStatistics<PSCustomObject>
#>
function ConvertFrom-JsonToPlayerStatistics {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSHL => PlayerStatistics' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PlayerStatistics
        $AllProperties = ('PlayerId', 'GP', 'Info', 'Rank', 'TOI', 'TOI_GP', 'A', 'BkS', 'G', 'GWG', 'Hits', 'Minus', 'PIM', 'PPG', 'Plus', 'PlusMinus', 'SOG', 'TP')
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq '{}') {
            # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'PlayerId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'PlayerId'))) {
            throw "Error! JSON cannot be serialized due to the required property 'PlayerId' missing."
        } else {
            $PlayerId = $JsonParameters.PSobject.Properties['PlayerId'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'GP'))) {
            throw "Error! JSON cannot be serialized due to the required property 'GP' missing."
        } else {
            $GP = $JsonParameters.PSobject.Properties['GP'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'Info'))) {
            throw "Error! JSON cannot be serialized due to the required property 'Info' missing."
        } else {
            $Info = $JsonParameters.PSobject.Properties['Info'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'Rank'))) {
            throw "Error! JSON cannot be serialized due to the required property 'Rank' missing."
        } else {
            $Rank = $JsonParameters.PSobject.Properties['Rank'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'TOI'))) {
            throw "Error! JSON cannot be serialized due to the required property 'TOI' missing."
        } else {
            $TOI = $JsonParameters.PSobject.Properties['TOI'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'TOI_GP'))) {
            throw "Error! JSON cannot be serialized due to the required property 'TOI_GP' missing."
        } else {
            $TOIGP = $JsonParameters.PSobject.Properties['TOI_GP'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'A'))) {
            throw "Error! JSON cannot be serialized due to the required property 'A' missing."
        } else {
            $A = $JsonParameters.PSobject.Properties['A'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'BkS'))) {
            throw "Error! JSON cannot be serialized due to the required property 'BkS' missing."
        } else {
            $BkS = $JsonParameters.PSobject.Properties['BkS'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'G'))) {
            throw "Error! JSON cannot be serialized due to the required property 'G' missing."
        } else {
            $G = $JsonParameters.PSobject.Properties['G'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'GWG'))) {
            throw "Error! JSON cannot be serialized due to the required property 'GWG' missing."
        } else {
            $GWG = $JsonParameters.PSobject.Properties['GWG'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'Hits'))) {
            throw "Error! JSON cannot be serialized due to the required property 'Hits' missing."
        } else {
            $Hits = $JsonParameters.PSobject.Properties['Hits'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'Minus'))) {
            throw "Error! JSON cannot be serialized due to the required property 'Minus' missing."
        } else {
            $Minus = $JsonParameters.PSobject.Properties['Minus'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'PIM'))) {
            throw "Error! JSON cannot be serialized due to the required property 'PIM' missing."
        } else {
            $PIM = $JsonParameters.PSobject.Properties['PIM'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'PPG'))) {
            throw "Error! JSON cannot be serialized due to the required property 'PPG' missing."
        } else {
            $PPG = $JsonParameters.PSobject.Properties['PPG'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'Plus'))) {
            throw "Error! JSON cannot be serialized due to the required property 'Plus' missing."
        } else {
            $Plus = $JsonParameters.PSobject.Properties['Plus'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'PlusMinus'))) {
            throw "Error! JSON cannot be serialized due to the required property 'PlusMinus' missing."
        } else {
            $PlusMinus = $JsonParameters.PSobject.Properties['PlusMinus'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'SOG'))) {
            throw "Error! JSON cannot be serialized due to the required property 'SOG' missing."
        } else {
            $SOG = $JsonParameters.PSobject.Properties['SOG'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'TP'))) {
            throw "Error! JSON cannot be serialized due to the required property 'TP' missing."
        } else {
            $TP = $JsonParameters.PSobject.Properties['TP'].value
        }

        $PSO = [PSCustomObject]@{
            'PlayerId'  = ${PlayerId}
            'GP'        = ${GP}
            'Info'      = ${Info}
            'Rank'      = ${Rank}
            'TOI'       = ${TOI}
            'TOI_GP'    = ${TOIGP}
            'A'         = ${A}
            'BkS'       = ${BkS}
            'G'         = ${G}
            'GWG'       = ${GWG}
            'Hits'      = ${Hits}
            'Minus'     = ${Minus}
            'PIM'       = ${PIM}
            'PPG'       = ${PPG}
            'Plus'      = ${Plus}
            'PlusMinus' = ${PlusMinus}
            'SOG'       = ${SOG}
            'TP'        = ${TP}
        }

        return $PSO
    }

}

