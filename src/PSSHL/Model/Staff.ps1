#
# Öppet API för SHL
# Version: 1.0
# Contact: support@shl.se
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER StaffId
The id of the person
.PARAMETER Title
Title of the person
.PARAMETER FirstName
The first name of the person
.PARAMETER LastName
The last name of the person
.PARAMETER Nationality
The nationality of the person
.PARAMETER ShortDescription
A short description of the person
.OUTPUTS

Staff<PSCustomObject>
#>

function Initialize-Staff {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StaffId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Title},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FirstName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LastName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Nationality},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ShortDescription}
    )

    Process {
        'Creating PSCustomObject: PSSHL => Staff' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $StaffId) {
            throw "invalid value for 'StaffId', 'StaffId' cannot be null."
        }

        if ($null -eq $Title) {
            throw "invalid value for 'Title', 'Title' cannot be null."
        }

        if ($null -eq $FirstName) {
            throw "invalid value for 'FirstName', 'FirstName' cannot be null."
        }

        if ($null -eq $LastName) {
            throw "invalid value for 'LastName', 'LastName' cannot be null."
        }

        if ($null -eq $Nationality) {
            throw "invalid value for 'Nationality', 'Nationality' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            'staff_id'          = ${StaffId}
            'title'             = ${Title}
            'first_name'        = ${FirstName}
            'last_name'         = ${LastName}
            'nationality'       = ${Nationality}
            'short_description' = ${ShortDescription}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Staff<PSCustomObject>

.DESCRIPTION

Convert from JSON to Staff<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Staff<PSCustomObject>
#>
function ConvertFrom-JsonToStaff {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSHL => Staff' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Staff
        $AllProperties = ('staff_id', 'title', 'first_name', 'last_name', 'nationality', 'short_description')
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq '{}') {
            # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'staff_id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'staff_id'))) {
            throw "Error! JSON cannot be serialized due to the required property 'staff_id' missing."
        } else {
            $StaffId = $JsonParameters.PSobject.Properties['staff_id'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'title'))) {
            throw "Error! JSON cannot be serialized due to the required property 'title' missing."
        } else {
            $Title = $JsonParameters.PSobject.Properties['title'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'first_name'))) {
            throw "Error! JSON cannot be serialized due to the required property 'first_name' missing."
        } else {
            $FirstName = $JsonParameters.PSobject.Properties['first_name'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'last_name'))) {
            throw "Error! JSON cannot be serialized due to the required property 'last_name' missing."
        } else {
            $LastName = $JsonParameters.PSobject.Properties['last_name'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'nationality'))) {
            throw "Error! JSON cannot be serialized due to the required property 'nationality' missing."
        } else {
            $Nationality = $JsonParameters.PSobject.Properties['nationality'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'short_description'))) {
            #optional property not found
            $ShortDescription = $null
        } else {
            $ShortDescription = $JsonParameters.PSobject.Properties['short_description'].value
        }

        $PSO = [PSCustomObject]@{
            'staff_id'          = ${StaffId}
            'title'             = ${Title}
            'first_name'        = ${FirstName}
            'last_name'         = ${LastName}
            'nationality'       = ${Nationality}
            'short_description' = ${ShortDescription}
        }

        return $PSO
    }

}

