#
# Öppet API för SHL
# Version: 1.0
# Contact: support@shl.se
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Gametime
Time into the period of the game ii:ss
.PARAMETER TimePeriod
Time into the period of the game in seconds
.PARAMETER GameId
Id of the game
.PARAMETER Period
Period of the game
.PARAMETER Round
Round number of the game
.PARAMETER HomeTeamCode
Team code of the home team
.PARAMETER HomeScore
Score of the home team
.PARAMETER AwayTeamCode
Team code of the away team
.PARAMETER AwayScore
Score of the away team
.PARAMETER Venue
Name of the venue where the game is played
.PARAMETER Attendance
The number of attendance of the game
.PARAMETER StatusString
The status of the game
.OUTPUTS

Live<PSCustomObject>
#>

function Initialize-Live {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Gametime},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${TimePeriod},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${GameId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Period},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Round},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HomeTeamCode},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${HomeScore},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AwayTeamCode},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${AwayScore},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Venue},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Attendance},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StatusString}
    )

    Process {
        'Creating PSCustomObject: PSSHL => Live' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Gametime) {
            throw "invalid value for 'Gametime', 'Gametime' cannot be null."
        }

        if ($null -eq $TimePeriod) {
            throw "invalid value for 'TimePeriod', 'TimePeriod' cannot be null."
        }

        if ($null -eq $GameId) {
            throw "invalid value for 'GameId', 'GameId' cannot be null."
        }

        if ($null -eq $Period) {
            throw "invalid value for 'Period', 'Period' cannot be null."
        }

        if ($null -eq $Round) {
            throw "invalid value for 'Round', 'Round' cannot be null."
        }

        if ($null -eq $HomeTeamCode) {
            throw "invalid value for 'HomeTeamCode', 'HomeTeamCode' cannot be null."
        }

        if ($null -eq $HomeScore) {
            throw "invalid value for 'HomeScore', 'HomeScore' cannot be null."
        }

        if ($null -eq $AwayTeamCode) {
            throw "invalid value for 'AwayTeamCode', 'AwayTeamCode' cannot be null."
        }

        if ($null -eq $AwayScore) {
            throw "invalid value for 'AwayScore', 'AwayScore' cannot be null."
        }

        if ($null -eq $Venue) {
            throw "invalid value for 'Venue', 'Venue' cannot be null."
        }

        if ($null -eq $Attendance) {
            throw "invalid value for 'Attendance', 'Attendance' cannot be null."
        }

        if ($null -eq $StatusString) {
            throw "invalid value for 'StatusString', 'StatusString' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            'gametime'       = ${Gametime}
            'time_period'    = ${TimePeriod}
            'game_id'        = ${GameId}
            'period'         = ${Period}
            'round'          = ${Round}
            'home_team_code' = ${HomeTeamCode}
            'home_score'     = ${HomeScore}
            'away_team_code' = ${AwayTeamCode}
            'away_score'     = ${AwayScore}
            'venue'          = ${Venue}
            'attendance'     = ${Attendance}
            'status_string'  = ${StatusString}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Live<PSCustomObject>

.DESCRIPTION

Convert from JSON to Live<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Live<PSCustomObject>
#>
function ConvertFrom-JsonToLive {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSHL => Live' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Live
        $AllProperties = ('gametime', 'time_period', 'game_id', 'period', 'round', 'home_team_code', 'home_score', 'away_team_code', 'away_score', 'venue', 'attendance', 'status_string')
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq '{}') {
            # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'gametime' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'gametime'))) {
            throw "Error! JSON cannot be serialized due to the required property 'gametime' missing."
        } else {
            $Gametime = $JsonParameters.PSobject.Properties['gametime'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'time_period'))) {
            throw "Error! JSON cannot be serialized due to the required property 'time_period' missing."
        } else {
            $TimePeriod = $JsonParameters.PSobject.Properties['time_period'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'game_id'))) {
            throw "Error! JSON cannot be serialized due to the required property 'game_id' missing."
        } else {
            $GameId = $JsonParameters.PSobject.Properties['game_id'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'period'))) {
            throw "Error! JSON cannot be serialized due to the required property 'period' missing."
        } else {
            $Period = $JsonParameters.PSobject.Properties['period'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'round'))) {
            throw "Error! JSON cannot be serialized due to the required property 'round' missing."
        } else {
            $Round = $JsonParameters.PSobject.Properties['round'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'home_team_code'))) {
            throw "Error! JSON cannot be serialized due to the required property 'home_team_code' missing."
        } else {
            $HomeTeamCode = $JsonParameters.PSobject.Properties['home_team_code'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'home_score'))) {
            throw "Error! JSON cannot be serialized due to the required property 'home_score' missing."
        } else {
            $HomeScore = $JsonParameters.PSobject.Properties['home_score'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'away_team_code'))) {
            throw "Error! JSON cannot be serialized due to the required property 'away_team_code' missing."
        } else {
            $AwayTeamCode = $JsonParameters.PSobject.Properties['away_team_code'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'away_score'))) {
            throw "Error! JSON cannot be serialized due to the required property 'away_score' missing."
        } else {
            $AwayScore = $JsonParameters.PSobject.Properties['away_score'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'venue'))) {
            throw "Error! JSON cannot be serialized due to the required property 'venue' missing."
        } else {
            $Venue = $JsonParameters.PSobject.Properties['venue'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'attendance'))) {
            throw "Error! JSON cannot be serialized due to the required property 'attendance' missing."
        } else {
            $Attendance = $JsonParameters.PSobject.Properties['attendance'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'status_string'))) {
            throw "Error! JSON cannot be serialized due to the required property 'status_string' missing."
        } else {
            $StatusString = $JsonParameters.PSobject.Properties['status_string'].value
        }

        $PSO = [PSCustomObject]@{
            'gametime'       = ${Gametime}
            'time_period'    = ${TimePeriod}
            'game_id'        = ${GameId}
            'period'         = ${Period}
            'round'          = ${Round}
            'home_team_code' = ${HomeTeamCode}
            'home_score'     = ${HomeScore}
            'away_team_code' = ${AwayTeamCode}
            'away_score'     = ${AwayScore}
            'venue'          = ${Venue}
            'attendance'     = ${Attendance}
            'status_string'  = ${StatusString}
        }

        return $PSO
    }

}

