#
# Öppet API för SHL
# Version: 1.0
# Contact: support@shl.se
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Facts
No description available.
.PARAMETER Players
List of players belonging to the team
.PARAMETER Staff
List of staff members belonging to the team
.OUTPUTS

Teams<PSCustomObject>
#>

function Initialize-Teams {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Facts},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Players},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Staff}
    )

    Process {
        'Creating PSCustomObject: PSSHL => Teams' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Facts) {
            throw "invalid value for 'Facts', 'Facts' cannot be null."
        }

        if ($null -eq $Players) {
            throw "invalid value for 'Players', 'Players' cannot be null."
        }

        if ($null -eq $Staff) {
            throw "invalid value for 'Staff', 'Staff' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            'facts'   = ${Facts}
            'players' = ${Players}
            'staff'   = ${Staff}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Teams<PSCustomObject>

.DESCRIPTION

Convert from JSON to Teams<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Teams<PSCustomObject>
#>
function ConvertFrom-JsonToTeams {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSHL => Teams' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Teams
        $AllProperties = ('facts', 'players', 'staff')
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq '{}') {
            # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'facts' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'facts'))) {
            throw "Error! JSON cannot be serialized due to the required property 'facts' missing."
        } else {
            $Facts = $JsonParameters.PSobject.Properties['facts'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'players'))) {
            throw "Error! JSON cannot be serialized due to the required property 'players' missing."
        } else {
            $Players = $JsonParameters.PSobject.Properties['players'].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match 'staff'))) {
            throw "Error! JSON cannot be serialized due to the required property 'staff' missing."
        } else {
            $Staff = $JsonParameters.PSobject.Properties['staff'].value
        }

        $PSO = [PSCustomObject]@{
            'facts'   = ${Facts}
            'players' = ${Players}
            'staff'   = ${Staff}
        }

        return $PSO
    }

}

